# ESPHome controller for M-Spa spabaths
# Please read readme.md before using

esphome:
  name: m-spa-controller
  friendly_name: M-Spa controller

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
# the encryption key is just a randomly generated key from here: https://esphome.io/components/api.html
api:
  encryption:
    key: "DbYfh5MrzMMtWubnHlbiQ4Sm1240kAr0d5i6a+7MD5Q="

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "M-Spa-Controller"
    password: "somesecretpassword"

captive_portal:

uart:
  id: uart_bus
  tx_pin: 17
  rx_pin: 16
  baud_rate: 9600

globals:
  - id: pending_temp
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: target_temp_val
    type: int
    restore_value: no
    initial_value: '0'
  - id: current_temp_val
    type: double
    restore_value: no
    initial_value: '0'
  - id: bath_type_val #bath type value
    type: int
    restore_value: yes
    initial_value: '0'
  - id: prev_status_code
    type: bool
    restore_value: no
    initial_value: '0'
  - id: bubble_level_val
    type: int
    restore_value: no
    initial_value: '0'
  - id: target_reached
    type: bool
    restore_value: no
    initial_value: 'false'

sensor:
  - platform: template
    name: "Current Temperature"
    id: current_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    update_interval: never
  - platform: homeassistant #remove this part entirely if you dont have a power meter
    name: "Current power"
    id: current_power
    entity_id: sensor.energimatare_spabad_power #rename this to a power sensor conencted to the bath
    unit_of_measurement: "W"
    accuracy_decimals: 0
    internal: false
    disabled_by_default: true

text_sensor:
  - platform: template
    name: "Status code"
    id: status_code_text
    update_interval: never
  - platform: template
    name: "Last error message"
    id: error_message
    update_interval: never

number:
  - platform: template
    name: "Target temperature"
    id: target_temp
    min_value: 20
    max_value: 40
    initial_value: 40 # spa default
    restore_value: true
    step: 1
    optimistic: true
    unit_of_measurement: "°C"
    on_value:
      then: 
        - lambda: |-
            id(target_temp_val) = (int)x;
            id(pending_temp) = true;
  - platform: template
    name: "Bubble level"
    id: bubble_level
    min_value: 0
    max_value: 3
    initial_value: 0
    step: 1
    optimistic: true
    on_value:
      then: 
        - lambda: |-
            id(bubble_level_val) = (int)x;

select:
  - platform: template
    name: "Bath type"
    id: bath_type
    options: 
      - "Unknown"
      - "Premium Camaro"
#      - "Rimba"
      - "Other (double temp)"
    optimistic: True
    initial_option: "Premium Camaro"
    set_action: 
      then:
        - lambda: |-
            if(x == "Unknown") {
              id(bath_type_val) = 0;
            } else if(x == "Premium Camaro") {
              id(bath_type_val) = 1;
            } else if(x == "Rimba") {
              id(bath_type_val) = 2;
            } else{
              id(bath_type_val) = 99;
            }

switch:
  - platform: template
    name: "Heater"
    id: heater_switch
    optimistic: true
    on_turn_on:
      then:
        - switch.turn_on: filter_switch

  - platform: template
    name: "Jet"
    id: jet_switch
    optimistic: true
    disabled_by_default: true

  - platform: template
    name: "UVC"
    id: uvc_switch
    optimistic: true
    disabled_by_default: true

  - platform: template
    name: "Ozone"
    id: ozone_switch
    optimistic: true
    on_turn_on: 
      then:
        - switch.turn_on: filter_switch

  - platform: template
    name: "Filter"
    id: filter_switch
    optimistic: true
    on_turn_off: 
      then:
        - switch.turn_off: heater_switch
    on_turn_on: 
      then:
        lambda: |-
          id(prev_status_code) = 0;

  - platform: template
    name: "Reset"
    id: reset_switch
    optimistic: true
    on_turn_on: 
      then:
        - switch.turn_off: filter_switch
        - switch.turn_off: heater_switch
        - switch.turn_off: jet_switch
        - switch.turn_off: ozone_switch
        - switch.turn_off: uvc_switch
        - script.execute: temp_report_heartbeat
        - number.set: 
            id: bubble_level
            value: 0
        - lambda: 
            id(prev_status_code) = 0;


  - platform: restart
    name: "M-spa Controller restart"

script:
  - id: temp_report_heartbeat
    mode: restart
    then:
      - delay: 120s
      - lambda: 
          id(error_message).publish_state("Temp sensor error after 120s");
          id(reset_switch).publish_state(true);

interval:
  - interval: 200ms
    then:
      - lambda: |-
          uint8_t b;
          while (id(uart_bus).read_byte(&b)) {
            static uint8_t buffer[4];
            static int index = 0;

            if (b == 0xA5) {
              // Start of a new frame, reset buffer
              index = 0;
              buffer[index++] = b;
              //ESP_LOGD("uart", "[RX] Start-Byte 0xA5 received - new sequence begins");
            } else if (index > 0 && index < 4) {
              buffer[index++] = b;
              if (index == 4) {
                // As soon as 4 bytes are in the buffer, log the complete sequence
                ESP_LOGD("uart", "[RX] Received complete sequence: 0x%02X 0x%02X 0x%02X 0x%02X",
                        buffer[0], buffer[1], buffer[2], buffer[3]);
                
                uint8_t checksum = (buffer[0] + buffer[1] + buffer[2]) & 0xFF;
                if (checksum == buffer[3]) {
                  uint8_t code = buffer[1];
                  uint8_t value = buffer[2];
                  if (code == 0x06) {
                    id(current_temp_val) = value / 2.0f;
                    id(current_temp).publish_state(id(current_temp_val));
                    ESP_LOGI("logic", "Bath reported temperature: %.1f", id(current_temp_val));
                    id(temp_report_heartbeat).execute();
                  }

                  if(code == 0x08) {
                    char str[4]; // Enough to hold 3 digits and a null terminator
                    snprintf(str, sizeof(str), "%u", value); // Convert to string safely

                    // bath is running
                    if(value == 0x03) {
                      // if this is 0, it was just started or the reset switch was flipped
                      if(id(prev_status_code) == 0) {
                        if(id(reset_switch).state) {
                          ESP_LOGI("logic", "Bath reset with signal [0x%02X].", value);
                        } else {
                          ESP_LOGI("logic", "Bath started with signal [0x%02X].", value);
                        }
                      }
                      id(prev_status_code) = value;
                      id(status_code_text).publish_state("Running");
                    } else if(value == 0x00) {
                      if(id(prev_status_code) == 3) { // bath unexpectedly turned off, set error and set statuses to 0
                        ESP_LOGE("logic", "Bath sent off signal [0x%02X] during normal operation, resetting controller.", value);
                        id(prev_status_code) = value; // update status code to set it off
                        id(reset_switch).publish_state(true); // trigger reset to shut off all functions
                        id(status_code_text).publish_state("Error");
                        id(error_message).publish_state("Bath sent off signal during normal operation");
                      } else if(id(reset_switch).state) {
                        ESP_LOGI("logic", "Bath sent off signal [0x%02X] following reset switch trigger, bath can be started again.", value);
                        id(reset_switch).publish_state(false); // turn off reset switch as its done its job
                        id(prev_status_code) = value; // update status code to set it off
                        id(status_code_text).publish_state("Error");
                        id(error_message).publish_state("Reset switch triggered");
                      } else {
                        id(status_code_text).publish_state("Idle");
                      }
                    } else {
                      ESP_LOGE("logic", "Bath sent unknown signal [0x%02X] during normal operation, resetting controller.", value);
                      id(prev_status_code) = value;
                      id(reset_switch).publish_state(true); // reset as we dont know whats going on
                      id(status_code_text).publish_state("Error");
                      id(error_message).publish_state("Bath sent unknow status signal during normal operation");
                    }
                  }
                } else {
                  ESP_LOGW("uart", "[RX] Checksum error: Expected 0x%02X, received 0x%02X", checksum, buffer[3]);
                }
                index = 0;

                // stopping here or we will keep spamming the bus until we get an error
                break;
              }
            } else {
              // If a byte is received outside of an expected frame
              ESP_LOGW("uart", "[RX] Unexpected byte received: 0x%02X", b);
            }
          }

  - interval: 1000ms
    then:
      - lambda: |-
          auto send_frame = [](uint8_t code, uint8_t value) {
            uint8_t chk = (0xA5 + code + value) & 0xFF;
            std::vector<uint8_t> frame = {0xA5, code, value, chk};
            id(uart_bus).write_array(frame.data(), frame.size());
            ESP_LOGD("uart send", "[TX] 0xA5 0x%02X 0x%02X 0x%02X", code, value, chk);
            //delay(50);
          };

          // Control logic

          // 0x0B value 0 is sent when the bath is reset by long-pressing the filter button after an error code like E1/F1 (flow error)
          // if reset is successful, the bath should momentarily send back 0x08 0x03 which should turn off the reset switch again
          // also, the reset switch will turn off all other switches
          if(id(reset_switch).state) {
            send_frame(0x0B, 0x00);
          }

          // filter on/off
          uint8_t filterVal = id(filter_switch).state ? 0x01 : 0x00;
          send_frame(0x02, filterVal);

          // heater logic
          uint8_t heaterVal = 0x00;
          if(id(heater_switch).state && id(filter_switch).state) { // only set heater if also filter is set
            if(id(target_reached)) { // we already reached the target temperature, wait until we drop .5 below it again
              if(id(current_temp_val) < id(target_temp_val)) { // droppped below temp, target not reached anymore
                id(target_reached) = false;
              }
            } else { // keep heating
              if(id(current_temp_val) <= id(target_temp_val)) { // current temp is .5 intervals, so it will heat until it reaches target + .5
                heaterVal = 0x01;
              } else { // target reached, we set this to avoid turning heater on/off continuously once target temp is hit
                id(target_reached) = true;
              }
            }
          }
          send_frame(0x01, heaterVal);
          
          // bubble level is 0-3 (0 is off)
          uint8_t bubbleVal = id(bubble_level_val);
          send_frame(0x03, bubbleVal);

          // ozone on/off
          uint8_t ozoneVal = id(ozone_switch).state ? 0x01 : 0x00;
          send_frame(0x0E, ozoneVal);
          
          // jet on/off
          uint8_t jetVal =  id(jet_switch).state ? 0x01 : 0x00;
          send_frame(0x0D, jetVal);

          // uvc on/off
          uint8_t uvcVal = id(uvc_switch).state ? 0x01 : 0x00;
          send_frame(0x15, uvcVal);

          // this is not sent by the controller for the m-spa premium camaro spabath
          send_frame(0x16, 0x00); // Heartbeat

          // target temp setting was changed, send new value
          if (id(pending_temp)) {
            // set target temperature
            // some baths seem to want this value doubled, the premium camaro expects the actual value, so ex 0x28 for 40C
            int multiplier = 1;
            if(id(bath_type_val) == 99) {
              multiplier = 2;
            }
            send_frame(0x04, id(target_temp_val) * multiplier);
            id(pending_temp) = false;
          }

          ESP_LOGI("logic", "Filter: %u | Heater: %u | Bubble: %u | Ozone: %u | Jet: %u | UVC: %u | Target: %u | Current: %.1f | Target reached: %d", 
            filterVal, heaterVal, bubbleVal, ozoneVal, jetVal, uvcVal, id(target_temp_val), id(current_temp_val), id(target_reached));

        
